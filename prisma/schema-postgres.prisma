datasource db {
    provider = "postgresql"
    url      = env("AUTH_POSTGRES_PRISMA_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt
    Campaign          Campaign[]
    // isCollegeStudent  Boolean
    // collegeName       String
    hasActiveCampaign Boolean    @default(false)
    cfHandle          String     @default("")
    cfVerified        Boolean    @default(false)

    orderIds String[] @default([])
}

model Campaign {
    id             String @id @default(cuid())
    name           String
    user           User   @relation(fields: [userId], references: [id])
    userId         String
    numProblems    Int
    targetDuration Int
    cfHandle       String

    createdAt        DateTime  @default(now())
    activatedOn      DateTime?
    // should go true when we get confirmation from RazorPay/any 3rd party fund collector
    hasPledgedAmount Boolean   @default(false)
    pledgedAmount    Int
    pledgeCurrency   String

    status Status @default(CREATED)
}

enum Status {
    CREATED
    ACTIVE
    SUCCESS
    FAIL
}

model RazorPayTransaction {
    id        Int @id @default(autoincrement())
    paymentId String
    orderId   String
    signature String
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}
